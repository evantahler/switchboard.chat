- name: Generate release timestamp
  command: date +%Y%m%d%H%M%S
  register: timestamp
  run_once: true

- set_fact: "application='switchboard.chat'"
- set_fact: "release_path='/home/{{ deploy_user }}/www/{{ application }}/releases/{{ timestamp.stdout }}'"
- set_fact: "shared_path='/home/{{ deploy_user }}/www/{{ application }}/shared'"
- set_fact: "current_path='/home/{{ deploy_user }}/www/{{ application }}/current'"
- set_fact: keep_releases={{ 10|int }}

- name: ensure directories
  file: "path={{ item }} state=directory owner={{ deploy_user }}"
  with_items:
    - /home/{{ deploy_user }}/www
    - /home/{{ deploy_user }}/www/{{ application }}
    - "{{ shared_path }}"
    - /home/{{ deploy_user }}/www/{{ application }}/shared/config
    - /home/{{ deploy_user }}/www/{{ application }}/shared/log
    - /home/{{ deploy_user }}/www/{{ application }}/shared/pids
    - /home/{{ deploy_user }}/www/{{ application }}/shared/sockets
    - /home/{{ deploy_user }}/www/{{ application }}/shared/cached-copy
    - /home/{{ deploy_user }}/www/{{ application }}/shared/node_modules

- name: check git dirs
  register: "git_dir_application_check"
  stat: "path=/home/{{ deploy_user }}/www/{{ application }}/shared/cached-copy/.git"

- name: git clone
  git: 
    accept_hostkey: True 
    repo: "git@github.com:evantahler/{{ application }}.git" 
    version: "{{ git_branch | default('master') }}"
    dest: "/home/{{ deploy_user }}/www/{{ application }}/shared/cached-copy"
  sudo: yes
  sudo_user: '{{ deploy_user }}'
  when: "not git_dir_application_check.stat.exists"

- name: update source git repo
  shell: "git fetch && git reset --hard origin/master"
  sudo: yes
  sudo_user: '{{ deploy_user }}'
  args: 
    chdir: "{{ shared_path }}/cached-copy"

- name: Create release directory
  file: "state=directory owner='{{ deploy_user }}' path='{{ release_path }}'"
  sudo: yes
  sudo_user: '{{ deploy_user }}'

- name: copy the cached git copy
  shell: "cp -r {{ shared_path }}/cached-copy/. {{ release_path }}"
  sudo: yes
  sudo_user: '{{ deploy_user }}'

- name: git checkout
  shell: "git checkout origin/{{ git_branch }}"
  sudo: yes
  sudo_user: '{{ deploy_user }}'
  args: 
    chdir: "{{ release_path }}"

- name: symlinks
  shell: "rm -rf {{ item.dest }} && ln -s {{ item.src }} {{ item.dest }}"
  sudo: yes
  sudo_user: '{{ deploy_user }}'
  with_items: 
    - { src: '{{ shared_path }}/log',          dest: '{{ release_path }}/log'           }
    - { src: '{{ shared_path }}/pids',         dest: '{{ release_path }}/pids'          }
    - { src: '{{ shared_path }}/sockets',      dest: '{{ release_path }}/sockets'       }
    - { src: '{{ shared_path }}/node_modules', dest: '{{ release_path }}/node_modules'  }

- name: npm install
  sudo: yes
  sudo_user: '{{ deploy_user }}'
  args:
    chdir: "{{ release_path }}"
  shell: >
    npm install --production

- name: Update current Symlink
  sudo: yes
  sudo_user: '{{ deploy_user }}'
  file: "state=link path={{ current_path }} src={{ release_path }}"

- name: check actionhero running
  register: "actionhero_running_check"
  stat: "path=/home/{{ deploy_user }}/www/{{ application }}/current/pids/cluster_pidfile"

- name: start actionhero
  shell: " cd {{ current_path }} && ./node_modules/.bin/actionhero startCluster --daemon --workers={{ actionhero_workers }}"
  sudo: yes
  when: "not actionhero_running_check.stat.exists"

- name: restart actionhero
  ignore_errors: yes
  shell: "kill -s USR2 `cat /home/{{ deploy_user }}/www/{{ application }}/current/pids/cluster_pidfile`"
  sudo: yes
  when: "actionhero_running_check.stat.exists"

- meta: flush_handlers
